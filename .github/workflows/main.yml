name: 'Terraform OCI Deployment'

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    env:
      # OCI provider authentication secrets
      OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
      OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
      OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
      OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
      OCI_REGION: ${{ secrets.OCI_REGION }}
      
      # Terraform input variables
      TF_VAR_compartment_ocid: ${{ secrets.OCI_COMPARTMENT_OCID }}
      TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_db_admin_username: ${{ secrets.DB_ADMIN_USERNAME }}
      TF_VAR_db_admin_password: ${{ secrets.DB_ADMIN_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init

      # --- This is the new step to test permissions ---
      - name: Check OCI Permissions
        id: check_perms
        run: |
          echo "--- Installing OCI CLI ---"
          pip3 install oci-cli
          echo "--- Checking permissions to create a VCN (dry run)... ---"
          oci network vcn create --compartment-id ${{ env.TF_VAR_compartment_ocid }} --cidr-block "10.0.0.0/16" --display-name "permission-check-dry-run" --dry-run
          echo "--- VCN creation permission check successful! ---"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -no-color

      - name: Run Terraform Destroy on Failure
        if: failure()
        run: terraform destroy -auto-approve -no-color
