name: Build and Deploy to OKE

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
      OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY }}
      OCI_CLI_REGION: ${{ secrets.OCI_REGION }}

      TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
      TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
      TF_VAR_private_key: ${{ secrets.OCI_PRIVATE_KEY }}
      TF_VAR_region: ${{ secrets.OCI_REGION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup OCI Config File
        run: |
          set -eo pipefail
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/key.pem
          chmod 600 ~/.oci/key.pem
          cat > ~/.oci/config <<-EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          key_file=~/.oci/key.pem
          EOF

      - name: Get or create an OCIR Repository
        id: get-ocir-repository
        uses: oracle-actions/get-ocir-repository@v1.3.0
        with:
          name: ktor-oke-app
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}

      - name: Log into OCIR
        uses: oracle-actions/login-ocir@v1.3.0
        id: login-ocir
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}
          region: ${{ secrets.OCI_REGION }}

      # REMOVED: The Gradle cache step is no longer needed.
      # REMOVED: The Gradle build step is no longer needed.

      - name: Build and Push Docker Image
        id: build-image
        run: |
          IMAGE_TAG=$GITHUB_SHA
          IMAGE_URL="${{ steps.get-ocir-repository.outputs.repo_path }}:$IMAGE_TAG"
          # This command now does EVERYTHING: builds the app and the image.
          docker build -t $IMAGE_URL .
          docker push $IMAGE_URL
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Install OCI CLI
        run: |
          curl -L -o oci-cli.sh https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          bash oci-cli.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          /home/runner/bin/oci --version
          
      - name: Terraform Init
        run: terraform init

      # REMOVED the targeted apply/replace step as it was a one-time fix.
      # A standard apply is all that's needed now.
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="docker_image=${{ steps.build-image.outputs.image_url }}" \
            -var="node_image_ocid=${{ secrets.OCI_NODE_IMAGE_OCID }}" \
            -var="compartment_ocid=${{ secrets.OCI_COMPARTMENT_OCID }}" \
            -var="tenancy_namespace=${{ steps.get-ocir-repository.outputs.namespace }}"
