# This workflow builds a Ktor application, containerizes it, pushes the
# resulting image to Oracle Cloud Infrastructure Registry (OCIR), and then
# uses Terraform to deploy the application to Oracle Kubernetes Engine (OKE).

name: Build and Deploy to OKE

# This workflow triggers on any push to the 'main' branch.
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up the OCI Command Line Interface (CLI)
      # This action authenticates the workflow with your OCI tenancy.
      - name: Setup OCI CLI
        uses: oracle-actions/setup-oci-cli@v1
        with:
          tenancy: ${{ secrets.OCI_TENANCY_OCID }}
          user: ${{ secrets.OCI_USER_OCID }}
          fingerprint: ${{ secrets.OCI_FINGERPRINT }}
          key: ${{ secrets.OCI_PRIVATE_KEY }}
          region: ${{ secrets.OCI_REGION }}

      # Step 3: Log in to the Oracle Cloud Infrastructure Registry (OCIR)
      # This authenticates the Docker client to push images to your registry.
      - name: Login to OCIR
        uses: oracle-actions/login-ocir@v1
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}
      
      # Step 4: Install jq for JSON processing
      # jq is needed in the next step to parse the OCI namespace from a JSON response.
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Step 5: Build, tag, and push the Docker image
      # This step builds the application, tags it with the correct OCIR path,
      # and pushes it to the registry. It also outputs the full image URL for Terraform.
      - name: Build and Push Docker Image
        id: build-image
        run: |
          # Dynamically get the OCIR namespace to avoid needing an extra secret
          NAMESPACE=$(oci os ns get --raw-output | jq -r .data)
          IMAGE_NAME="ktor-oke-app"
          IMAGE_TAG=$GITHUB_SHA
          
          # Construct the full image URL
          IMAGE_URL="${{ secrets.OCI_REGION }}.ocir.io/${NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}"
          
          # Build, tag, and push the image
          docker build -t $IMAGE_URL .
          docker push $IMAGE_URL
          
          # Set the image URL as an output for a later step
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

      # Step 6: Set up Terraform
      # This action installs the Terraform CLI in the workflow runner.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Step 7: Initialize Terraform
      # This downloads the necessary providers for your configuration.
      - name: Terraform Init
        run: terraform init

      # Step 8: Apply Terraform Configuration
      # This step creates or updates the infrastructure in OCI.
      # It passes the Docker image URL, node image OCID, and compartment OCID
      # as variables to the Terraform configuration.
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="docker_image=${{ steps.build-image.outputs.image_url }}" \
            -var="node_image_ocid=${{ secrets.OCI_NODE_IMAGE_OCID }}" \
            -var="compartment_ocid=${{ secrets.OCI_COMPARTMENT_OCID }}"

