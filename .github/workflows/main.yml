# .github/workflows/main.yml
name: 'Deploy OKE Cluster with Terraform'

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform OKE Deployment'
    runs-on: ubuntu-latest
    env:
      # These environment variables are used by the Terraform OCI provider
      TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
      TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
      TF_VAR_region: ${{ secrets.OCI_REGION }}
      # We write the private key to a temporary file for Terraform to use
      OCI_PRIVATE_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY }}

    steps:
      # 1. Checkout the repository code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0 # Specify a Terraform version

      # 3. Create OCI Private Key File from Secret
      - name: Create Private Key File
        run: |
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # 4. Initialize Terraform
      # The compartment_ocid is passed as a command-line variable
      - name: Terraform Init
        id: init
        run: terraform init -var="compartment_ocid=${{ secrets.OCI_COMPARTMENT_OCID }}" -var="private_key_path=private_key.pem"

      # 5. Generate a Terraform Plan
      # On pull requests, the workflow will stop here after showing the plan
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var="compartment_ocid=${{ secrets.OCI_COMPARTMENT_OCID }}" -var="private_key_path=private_key.pem"

      # 6. Apply the Terraform plan
      # This step ONLY runs on a push to the 'main' branch
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var="compartment_ocid=${{ secrets.OCI_COMPARTMENT_OCID }}" -var="private_key_path=private_key.pem"

      # 7. Clean up the private key file
      - name: Clean up private key
        if: always() # This step always runs, even if previous steps fail
        run: rm -f private_key.pem
