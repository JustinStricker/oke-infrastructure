name: Build and Deploy to OKE

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # This env block is now much simpler.
    # We only need the TF_VARs for the OCI provider configuration.
    env:
      TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
      TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
      TF_VAR_private_key: ${{ secrets.OCI_PRIVATE_KEY }}
      TF_VAR_region: ${{ secrets.OCI_REGION }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # --- NEW AUTHENTICATION STEP ---
      # This is the most reliable way to handle OCI authentication in CI/CD.
      # It creates the config and key files that all OCI tools expect.
      - name: Setup OCI Config File
        run: |
          set -eo pipefail # Fail on any error
          mkdir -p ~/.oci
          echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/key.pem
          # Ensure the key file has the correct permissions
          chmod 600 ~/.oci/key.pem
          
          cat > ~/.oci/config <<-EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          key_file=~/.oci/key.pem
          EOF
          echo "OCI config file created successfully."

      - name: Get or create an OCIR Repository
        id: get-ocir-repository
        uses: oracle-actions/get-ocir-repository@v1.3.0
        with:
          name: ktor-oke-app
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}

      - name: Log into OCIR
        uses: oracle-actions/login-ocir@v1.3.0
        id: login-ocir
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}
          region: ${{ secrets.OCI_REGION }}

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.5'
          arguments: shadowJar

      - name: Build and Push Docker Image
        id: build-image
        run: |
          IMAGE_TAG=$GITHUB_SHA
          IMAGE_URL="${{ steps.get-ocir-repository.outputs.repo_path }}:$IMAGE_TAG"
          docker build -t $IMAGE_URL .
          docker push $IMAGE_URL
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
          
      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="docker_image=${{ steps.build-image.outputs.image_url }}" \
            -var="node_image_ocid=${{ secrets.OCI_NODE_IMAGE_OCID }}" \
            -var="compartment_ocid=${{ secrets.OCI_COMPARTMENT_OCID }}" \
            -var="tenancy_namespace=${{ steps.get-ocir-repository.outputs.namespace }}"
